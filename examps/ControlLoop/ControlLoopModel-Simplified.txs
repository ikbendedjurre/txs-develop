{-
TorXakis - Model Based Testing
Copyright (c) 2015-2017 TNO and Radboud University
See LICENSE at root directory of this repository.
-}

TYPEDEF Data ::= D0 | D1 | D2 ENDDEF
TYPEDEF ProduceReport ::= ProduceReport { id, value :: Data } ENDDEF
TYPEDEF MeasureReport ::= MeasureReport { id, value :: Data } ENDDEF
TYPEDEF Correction    ::= Correction    { id, value :: Data } ENDDEF

FUNCDEF sgn ( x :: Data ) :: Data ::=
    x
ENDDEF

FUNCDEF data2int ( x :: Data ) :: Int ::=
    IF x == D0
    THEN 0
    ELSE IF x == D1
         THEN 1
         ELSE 2
         FI
    FI
ENDDEF

FUNCDEF int2data ( x :: Int ) :: Data ::=
    LET y = ((x % 3) + 3) % 3 IN
        IF x == 0
        THEN D0
        ELSE IF x == 1
             THEN D1
             ELSE D2
             FI
        FI
    NI
ENDDEF

FUNCDEF subtract ( x :: Data; y :: Data ) :: Data ::=
    int2data(data2int(x) - data2int(y))
ENDDEF

PROCDEF produce [ In_Material           :: Data
                ; In_Correction         :: Correction
                ; Out_Material          :: Data
                ; Out_ProduceReport     :: ProduceReport
                ]( ) ::=
        In_Material ? id
    >-> produceLoop [In_Material, In_Correction, Out_Material, Out_ProduceReport] (id)
ENDDEF

PROCDEF produceLoop [ In_Material           :: Data
                    ; In_Correction         :: Correction
                    ; Out_Material          :: Data
                    ; Out_ProduceReport     :: ProduceReport
                    ]( id :: Data ) ::=
    (       
            Out_Material ! id 
        >-> In_Material ? nextId
        >-> EXIT ! nextId
    )
    |[ Out_Material ]|
    (
        (
                ( Out_Material ! id >-> EXIT )
            |||
                ( Out_ProduceReport ? pr [[ id(pr) == id ]] >-> EXIT )
        ) >>>
            ( In_Correction ? correction [[ id (correction) == id ]] >-> EXIT ? nextId :: Data )
    )
    >>> ACCEPT ? nextId :: Data IN
        produceLoop [In_Material, In_Correction, Out_Material, Out_ProduceReport] (nextId)
    NI
ENDDEF

PROCDEF measure [ In_Material   :: Data
                ; Out_Report    :: MeasureReport
                ; Out_Material  :: Data
                ]( ) ::=
        In_Material ? id
    >-> (
                Out_Report ? mr [[ id(mr) == id ]]
            >->
                (
                        Out_Material ! id 
                    >-> measure [ In_Material, Out_Report, Out_Material ] ()
                )
        )
ENDDEF

PROCDEF correct [ In_ProduceReport      :: ProduceReport
                ; In_MeasureReport      :: MeasureReport
                ; Out_Correction        :: Correction
                ] ( ) ::=
        In_ProduceReport ? pr | In_MeasureReport ? mr [[ id(pr) == id(mr) ]]
    >-> Out_Correction ? correction [[ ( id(correction) == id(mr) ) /\
                                   ( sgn(value(correction)) == sgn( subtract(value(pr), value(mr)) ) )]]
    >-> correct [ In_ProduceReport, In_MeasureReport, Out_Correction ] ( )
ENDDEF

PROCDEF model [ In_Material                 :: Data
              ; Correction                  :: Correction
              ; ProduceReport               :: ProduceReport
              ; Material                    :: Data
              ; MeasureReport               :: MeasureReport
              ; Out_Material                :: Data
              ]( ) ::=
        (
                produce [ In_Material, Correction, Material, ProduceReport ] ( )
            |[ Material]|
                measure [ Material, MeasureReport, Out_Material ] ( )
        )
    |[ ProduceReport, MeasureReport, Correction ]|
        correct [ ProduceReport, MeasureReport, Correction ] ( )
ENDDEF

CHANDEF Chans ::=    In_Material     :: Data
                   ; Correction      :: Correction
                   ; ProduceReport   :: ProduceReport
                   ; Material        :: Data
                   ; MeasureReport   :: MeasureReport
                   ; Out_Material    :: Data
ENDDEF

MODELDEF Model ::=
    CHAN IN
    CHAN OUT    In_Material
    ,           Correction
    ,           ProduceReport
    ,           Material
    ,           MeasureReport
    ,           Out_Material

    SYNC        {In_Material}
    ,           {Correction}
    ,           {ProduceReport}
    ,           {Material}
    ,           {MeasureReport}
    ,           {Out_Material}
    ,           {ProduceReport | MeasureReport}

    BEHAVIOUR
        model [In_Material, Correction, ProduceReport, Material, MeasureReport, Out_Material]()
ENDDEF
