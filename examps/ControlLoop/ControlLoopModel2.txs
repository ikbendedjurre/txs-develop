{-
TorXakis - Model Based Testing
Copyright (c) 2015-2017 TNO and Radboud University
See LICENSE at root directory of this repository.
-}

TYPEDEF ProduceReport ::= ProduceReport { id, value :: Int } ENDDEF
TYPEDEF MeasureReport ::= MeasureReport { id, value :: Int } ENDDEF
TYPEDEF Correction    ::= Correction    { id, value :: Int } ENDDEF

TYPEDEF  ReportList  ::=   Nil
                      | Cons  { hd ::  MeasureReport
                              ; tl ::  ReportList
                              }
ENDDEF


FUNCDEF  add ( x :: MeasureReport; l :: ReportList ) :: ReportList
         ::= IF    isNil(l)
             THEN  Cons(x,Nil)
             ELSE  Cons(hd(l),add(x,tl(l)))
             FI
ENDDEF

FUNCDEF sgn ( x :: Int ) :: Int ::=
    IF x > 0 
        THEN 1
        ELSE IF x < 0
                THEN -1
                ELSE 0 
             FI
    FI
ENDDEF

PROCDEF produce [ In_Material           :: Int
                ; In_Correction         :: Correction
                ; Out_Material          :: Int
                ; Out_ProduceReport     :: ProduceReport
                ]( ) ::=
        In_Material ? id
    >-> produceLoop [In_Material, In_Correction, Out_Material, Out_ProduceReport] (id)
ENDDEF

PROCDEF produceLoop [ In_Material           :: Int
                    ; In_Correction         :: Correction
                    ; Out_Material          :: Int
                    ; Out_ProduceReport     :: ProduceReport
                    ]( id :: Int ) ::=
    (       
            Out_Material ! id 
        >-> In_Material ? nextId
        >-> EXIT ! nextId
    )
    |[ Out_Material ]|
    (
        (
                ( Out_Material ! id >-> EXIT )
            |||
                ( Out_ProduceReport ? pr [[ id(pr) == id ]] >-> EXIT )
        ) >>>
            ( In_Correction ? correction [[ id (correction) == id ]] >-> EXIT ? nextId :: Int )
    )
    >>> ACCEPT ? nextId :: Int IN
        produceLoop [In_Material, In_Correction, Out_Material, Out_ProduceReport] (nextId)
    NI
ENDDEF

PROCDEF measure [ In_Material   :: Int
                ; Out_Report    :: MeasureReport
                ; Out_Material  :: Int
                ; Pass_Report   :: MeasureReport
                ] ( ) ::=
    In_Material ? id
        >-> Pass_Report ? mr [[ id(mr) == id ]]
        >-> Out_Material ! id
        >-> measure [ In_Material, Out_Report, Out_Material, Pass_Report ] ( )
ENDDEF

PROCDEF measureReporter [ Out_Report :: MeasureReport
                        ; Pass_Report :: MeasureReport
                        ]( queuedReports :: ReportList ) ::=
    (
        Pass_Report ? mr
            >-> measureReporter [ Out_Report, Pass_Report ] ( add(mr, queuedReports) )
    )
    ##
    (
        Out_Report ? mr [[ IF (isCons(queuedReports)) THEN hd(queuedReports) == mr ELSE False FI ]]
            >-> measureReporter [ Out_Report, Pass_Report ] ( tl(queuedReports) )
    )
ENDDEF

PROCDEF correct [ In_ProduceReport      :: ProduceReport
                ; In_MeasureReport      :: MeasureReport
                ; Out_Correction        :: Correction
                ] ( ) ::=
        In_ProduceReport ? pr | In_MeasureReport ? mr [[ id(pr) == id(mr) ]]
    >-> Out_Correction ? correction [[ ( id(correction) == id(mr) ) /\
                                   ( sgn(value(correction)) == sgn( value(pr) - value(mr) ) )]]
    >-> correct [ In_ProduceReport, In_MeasureReport, Out_Correction ] ( )
ENDDEF

PROCDEF model [ In_Material                 :: Int
              ; Correction                  :: Correction
              ; ProduceReport               :: ProduceReport
              ; Material                    :: Int
              ; MeasureReport               :: MeasureReport
              ; Out_Material                :: Int
              ; Pass_Report                 :: MeasureReport
              ]( ) ::=
        (
                produce [ In_Material, Correction, Material, ProduceReport ] ( )
             |[ Material]|
                (
                    measure [ Material, MeasureReport, Out_Material, Pass_Report ] ( )
                    |[ Pass_Report ]|
                    measureReporter [ MeasureReport, Pass_Report ] ( Nil )
                )
        )
    |[ ProduceReport, MeasureReport, Correction ]|
      correct [ ProduceReport, MeasureReport, Correction ] ( )
ENDDEF

CHANDEF Chans ::=    In_Material     :: Int
                   ; Correction      :: Correction
                   ; ProduceReport   :: ProduceReport
                   ; Material        :: Int
                   ; MeasureReport   :: MeasureReport
                   ; Out_Material    :: Int
                   ; PassReport      :: MeasureReport
ENDDEF

MODELDEF Model ::=
    CHAN IN
    CHAN OUT    In_Material
    ,           Correction
    ,           ProduceReport
    ,           Material
    ,           MeasureReport
    ,           Out_Material
    ,           PassReport

    SYNC        {In_Material}
    ,           {Correction}
    ,           {ProduceReport}
    ,           {Material}
    ,           {MeasureReport}
    ,           {Out_Material}
    ,           {ProduceReport | MeasureReport}

    BEHAVIOUR
        model [In_Material, Correction, ProduceReport, Material, MeasureReport, Out_Material, PassReport]()
ENDDEF
