-- LPE_proxyProcess --
CHANDEF ChanDefs
    ::= Chan1 :: Int
      ; Chan2 :: Int # Int
      ; Chan3 :: Int # Int
ENDDEF
PROCDEF LPE[Chan1 :: Int; Chan2 :: Int # Int; Chan3 :: Int # Int](v9 :: Int; v12 :: Int; v10 :: Int; v11 :: Int; v13 :: Int; v14 :: Int; v15 :: Int; v16 :: Int; v17 :: Int; v18 :: Int; v19 :: Int; v20 :: Int; v21 :: Int; v22 :: Int) ::=
        Chan1 ? v4 :: Int [[ IF (1==v9) THEN IF (1==v13) THEN (1==v14) ELSE False FI ELSE False FI ]] >-> LPE[Chan1, Chan2, Chan3](1, v12, v10, v11, 1, 0, v15, v16, v17, v18, v19, v20, v21, v22)
     ## Chan1 ? v4 :: Int [[ IF (1==v9) THEN IF (1==v13) THEN (1==v17) ELSE False FI ELSE False FI ]] >-> LPE[Chan1, Chan2, Chan3](1, v12, v10, v11, 1, v14, v15, v16, 0, v18, v19, v20, v21, v22)
     ## Chan1 ? v4 :: Int [[ IF (1==v9) THEN IF (1==v13) THEN (1==v20) ELSE False FI ELSE False FI ]] >-> LPE[Chan1, Chan2, Chan3](1, v12, v10, v11, 1, v14, v15, v16, v17, v18, v19, 0, v21, v22)
     ## Chan1 ? v4 :: Int | Chan2 ? v5 :: Int ? v6 :: Int [[ IF (1==v9) THEN (IF (0==v12) THEN (not((((v5*(-1)))>=0)) /\ not((((v6*(-1)))>=0))) ELSE False FI /\ IF (1==v13) THEN (1==v14) ELSE False FI) ELSE False FI ]] >-> LPE[Chan1, Chan2, Chan3](1, 1, v5, v6, 1, 0, v15, v16, v17, v18, v19, v20, v21, v22)
     ## Chan1 ? v4 :: Int | Chan2 ? v5 :: Int ? v6 :: Int [[ IF (1==v9) THEN (IF (0==v12) THEN (not((((v5*(-1)))>=0)) /\ not((((v6*(-1)))>=0))) ELSE False FI /\ IF (1==v13) THEN (1==v17) ELSE False FI) ELSE False FI ]] >-> LPE[Chan1, Chan2, Chan3](1, 1, v5, v6, 1, v14, v15, v16, 0, v18, v19, v20, v21, v22)
     ## Chan1 ? v4 :: Int | Chan2 ? v5 :: Int ? v6 :: Int [[ IF (1==v9) THEN (IF (0==v12) THEN (not((((v5*(-1)))>=0)) /\ not((((v6*(-1)))>=0))) ELSE False FI /\ IF (1==v13) THEN (1==v20) ELSE False FI) ELSE False FI ]] >-> LPE[Chan1, Chan2, Chan3](1, 1, v5, v6, 1, v14, v15, v16, v17, v18, v19, 0, v21, v22)
     ## Chan1 ? v4 :: Int | Chan3 ? v7 :: Int ? v8 :: Int [[ IF (1==v9) THEN (IF (1==v12) THEN ((v7==v10) /\ (v8==v11)) ELSE False FI /\ IF (1==v13) THEN ((1==v14) /\ IF (0==v17) THEN (not((((v7*(-1)))>=0)) /\ not((((v8*(-1)))>=0))) ELSE False FI) ELSE False FI) ELSE False FI ]] >-> LPE[Chan1, Chan2, Chan3](1, 0, v10, v11, 1, 0, v15, v16, 1, v7, v8, v20, v21, v22)
     ## Chan1 ? v4 :: Int | Chan3 ? v7 :: Int ? v8 :: Int [[ IF (1==v9) THEN (IF (1==v12) THEN ((v7==v10) /\ (v8==v11)) ELSE False FI /\ IF (1==v13) THEN ((1==v14) /\ IF (0==v20) THEN (not((((v7*(-1)))>=0)) /\ not((((v8*(-1)))>=0))) ELSE False FI) ELSE False FI) ELSE False FI ]] >-> LPE[Chan1, Chan2, Chan3](1, 0, v10, v11, 1, 0, v15, v16, v17, v18, v19, 1, v7, v8)
     ## Chan1 ? v4 :: Int | Chan3 ? v7 :: Int ? v8 :: Int [[ IF (1==v9) THEN (IF (1==v12) THEN ((v7==v10) /\ (v8==v11)) ELSE False FI /\ IF (1==v13) THEN ((1==v17) /\ IF (0==v14) THEN (not((((v7*(-1)))>=0)) /\ not((((v8*(-1)))>=0))) ELSE False FI) ELSE False FI) ELSE False FI ]] >-> LPE[Chan1, Chan2, Chan3](1, 0, v10, v11, 1, 1, v7, v8, 0, v18, v19, v20, v21, v22)
     ## Chan1 ? v4 :: Int | Chan3 ? v7 :: Int ? v8 :: Int [[ IF (1==v9) THEN (IF (1==v12) THEN ((v7==v10) /\ (v8==v11)) ELSE False FI /\ IF (1==v13) THEN ((1==v17) /\ IF (0==v20) THEN (not((((v7*(-1)))>=0)) /\ not((((v8*(-1)))>=0))) ELSE False FI) ELSE False FI) ELSE False FI ]] >-> LPE[Chan1, Chan2, Chan3](1, 0, v10, v11, 1, v14, v15, v16, 0, v18, v19, 1, v7, v8)
     ## Chan1 ? v4 :: Int | Chan3 ? v7 :: Int ? v8 :: Int [[ IF (1==v9) THEN (IF (1==v12) THEN ((v7==v10) /\ (v8==v11)) ELSE False FI /\ IF (1==v13) THEN ((1==v20) /\ IF (0==v14) THEN (not((((v7*(-1)))>=0)) /\ not((((v8*(-1)))>=0))) ELSE False FI) ELSE False FI) ELSE False FI ]] >-> LPE[Chan1, Chan2, Chan3](1, 0, v10, v11, 1, 1, v7, v8, v17, v18, v19, 0, v21, v22)
     ## Chan1 ? v4 :: Int | Chan3 ? v7 :: Int ? v8 :: Int [[ IF (1==v9) THEN (IF (1==v12) THEN ((v7==v10) /\ (v8==v11)) ELSE False FI /\ IF (1==v13) THEN ((1==v20) /\ IF (0==v17) THEN (not((((v7*(-1)))>=0)) /\ not((((v8*(-1)))>=0))) ELSE False FI) ELSE False FI) ELSE False FI ]] >-> LPE[Chan1, Chan2, Chan3](1, 0, v10, v11, 1, v14, v15, v16, 1, v7, v8, 0, v21, v22)
     ## Chan2 ? v5 :: Int ? v6 :: Int [[ IF (0==v9) THEN (not((((v5*(-1)))>=0)) /\ not((((v6*(-1)))>=0))) ELSE False FI ]] >-> LPE[Chan1, Chan2, Chan3](1, 1, v5, v6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
     ## Chan2 ? v5 :: Int ? v6 :: Int [[ IF (1==v9) THEN IF (0==v12) THEN (not((((v5*(-1)))>=0)) /\ not((((v6*(-1)))>=0))) ELSE False FI ELSE False FI ]] >-> LPE[Chan1, Chan2, Chan3](1, 1, v5, v6, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22)
     ## Chan3 ? v7 :: Int ? v8 :: Int [[ IF (1==v9) THEN (IF (0==v13) THEN (not((((v7*(-1)))>=0)) /\ not((((v8*(-1)))>=0))) ELSE False FI /\ IF (1==v12) THEN ((v7==v10) /\ (v8==v11)) ELSE False FI) ELSE False FI ]] >-> LPE[Chan1, Chan2, Chan3](1, 0, v10, v11, 1, 0, 0, 0, 0, 0, 0, 1, v7, v8)
     ## Chan3 ? v7 :: Int ? v8 :: Int [[ IF (1==v9) THEN (IF (0==v13) THEN (not((((v7*(-1)))>=0)) /\ not((((v8*(-1)))>=0))) ELSE False FI /\ IF (1==v12) THEN ((v7==v10) /\ (v8==v11)) ELSE False FI) ELSE False FI ]] >-> LPE[Chan1, Chan2, Chan3](1, 0, v10, v11, 1, 0, 0, 0, 1, v7, v8, 0, 0, 0)
     ## Chan3 ? v7 :: Int ? v8 :: Int [[ IF (1==v9) THEN (IF (0==v13) THEN (not((((v7*(-1)))>=0)) /\ not((((v8*(-1)))>=0))) ELSE False FI /\ IF (1==v12) THEN ((v7==v10) /\ (v8==v11)) ELSE False FI) ELSE False FI ]] >-> LPE[Chan1, Chan2, Chan3](1, 0, v10, v11, 1, 1, v7, v8, 0, 0, 0, 0, 0, 0)
     ## Chan3 ? v7 :: Int ? v8 :: Int [[ IF (1==v9) THEN (IF (1==v12) THEN ((v7==v10) /\ (v8==v11)) ELSE False FI /\ IF (1==v13) THEN IF (0==v14) THEN (not((((v7*(-1)))>=0)) /\ not((((v8*(-1)))>=0))) ELSE False FI ELSE False FI) ELSE False FI ]] >-> LPE[Chan1, Chan2, Chan3](1, 0, v10, v11, 1, 1, v7, v8, v17, v18, v19, v20, v21, v22)
     ## Chan3 ? v7 :: Int ? v8 :: Int [[ IF (1==v9) THEN (IF (1==v12) THEN ((v7==v10) /\ (v8==v11)) ELSE False FI /\ IF (1==v13) THEN IF (0==v17) THEN (not((((v7*(-1)))>=0)) /\ not((((v8*(-1)))>=0))) ELSE False FI ELSE False FI) ELSE False FI ]] >-> LPE[Chan1, Chan2, Chan3](1, 0, v10, v11, 1, v14, v15, v16, 1, v7, v8, v20, v21, v22)
     ## Chan3 ? v7 :: Int ? v8 :: Int [[ IF (1==v9) THEN (IF (1==v12) THEN ((v7==v10) /\ (v8==v11)) ELSE False FI /\ IF (1==v13) THEN IF (0==v20) THEN (not((((v7*(-1)))>=0)) /\ not((((v8*(-1)))>=0))) ELSE False FI ELSE False FI) ELSE False FI ]] >-> LPE[Chan1, Chan2, Chan3](1, 0, v10, v11, 1, v14, v15, v16, v17, v18, v19, 1, v7, v8)
ENDDEF
MODELDEF Model ::=
    CHAN IN Chan2
    CHAN OUT Chan1, Chan3
    BEHAVIOUR LPE[Chan1, Chan2, Chan3](0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
ENDDEF
